{"version":3,"sources":["/src/index.ts","default/src/oslo-akershus.csv"],"names":["$fsx","r","oslo_akershus_csv_1","d3_scale_chromatic_1","d3","mapboxgl","turf","window","loaded","location","reload","scenario","key","domain","scale","colorScale","str","range","interpolateInferno","Number","heightScale","map","Map","container","center","zoom","pitch","style","version","sources","basemap","type","tiles","x","layers","id","source","minzoom","maxzoom","addControl","NavigationControl","console","log","numberformat","Intl","NumberFormat","maximumSignificantDigits","asPrice","format","asM2","homeHTML","home","area","price","price_per_m2","url","csv","default","then","data","geojson","features","d","circle","lng","lat","units","steps","properties","Object","assign","height","color","on","addLayer","paint","fill-extrusion-color","fill-extrusion-base","fill-extrusion-height","fill-extrusion-opacity","e","Popup","setLngLat","lngLat","setHTML","setMaxWidth","addTo","addEventListener","keyCode","getCenter","toArray","join","getPitch","getZoom","defineProperty","exports","value","module"],"mappings":"kFAAAA,KAAAC,EAAA,GACAD,KAAAC,EAAA,GACA,MAAAC,EAAAF,KAAAC,EAAA,GACAE,EAAAH,KAAAC,EAAA,IACAG,EAAAJ,KAAAC,EAAA,KACAI,EAAAL,KAAAC,EAAA,KACAK,EAAAN,KAAAC,EAAA,KAGA,GAAIM,OAAOC,OACPD,OAAOE,SAASC,aACb,CACLH,OAAOC,QAAS,EAEhB,MAAMG,EACJ,CAAEC,IAAK,eAAgBC,OAAQ,CAAC,KAAQ,MAAUC,MAAO,YAKrDC,EAAcC,IAClB,MAAMF,EAAQV,EAAGO,EAASG,SAASD,OAAOF,EAASE,QAAQI,MAAM,CAAC,EAAG,IACrE,OAAOd,EAAAe,mBAAYJ,EAAMK,OAAOH,MAG5BI,EAAeJ,IAEnB,OADcZ,EAAGO,EAASG,SAASD,OAAOF,EAASE,QAAQI,MAAM,CAAC,IAAI,MAC/DH,CAAMK,OAAOH,KAGhBK,EAAM,IAAIhB,EAASiB,IAAI,CAC3BC,UAAW,MACXC,OAAQ,CAAC,mBAAoB,mBAC7BC,KAAM,mBACNC,MAAO,GACPC,MAAO,CACLC,QAAS,EACTC,QAAS,CACPC,QAAW,CACTC,KAAM,SACNC,MAAO,CAAC,IAAK,IAAK,KACfX,IAAIY,GAAK,UAAUA,yDAG1BC,OAAQ,CAAC,CACPC,GAAI,UACJJ,KAAM,SACNK,OAAQ,UACRC,QAAS,EACTC,QAAS,QAIfjB,EAAIkB,WAAW,IAAIlC,EAASmC,mBAE5BC,QAAQC,IAAItB,EAAY,UAExB,MAAMuB,EAAeC,KAAKC,aAAa,QAAS,CAAEC,yBAA0B,IACtEC,EAAW/B,GAAgB2B,EAAaK,OAAO7B,OAAOH,IAAQ,MAC9DiC,EAAQjC,GAAgB2B,EAAaK,OAAO7B,OAAOH,IAAQ,MAC3DkC,EAAWC,GAAQ,OAAOA,EAAgB,aAAKF,EAAKE,EAAKC,UAAUL,EAAQI,EAAKE,2BAA2BN,EAAQI,EAAKG,8BAA8BH,EAAKI,QAAQJ,EAAKI,UAE9KnD,EAAGoD,IAAItD,EAAAuD,SAAWC,KAAKC,IACrB,MAAMC,EAAU,CACd7B,KAAM,oBACN8B,SAAUF,EAEPtC,IAAIyC,GAAKxD,EAAKyD,OAAO,CACpB5C,OAAO2C,EAAEE,KACT7C,OAAO2C,EAAEG,MACR,IAAK,CAAEC,MAAO,SAAUC,MAAO,GAAIC,WAAUC,OAAAC,OAAA,CAC9CC,OAAQnD,EAAY0C,EAAEnD,EAASC,MAC/B4D,MAAOzD,EAAW+C,EAAEnD,EAASC,OAC1BkD,OAITrB,QAAQC,IAAIkB,EAAQC,SAAS,GAAGO,YAEhC/C,EAAIoD,GAAG,OAAQ,KACbpD,EAAIqD,SAAS,CACX3C,KAAM,iBACNI,GAAI,QACJC,OAAQ,CACNL,KAAM,UACN4B,KAAMC,GAERe,MAAO,CACLC,uBAAwB,CAAC,MAAO,SAChCC,sBAAuB,EACvBC,wBAAyB,CAAC,MAAO,UACjCC,yBAA0B,QAKhC1D,EAAIoD,GAAG,QAAS,QAASO,IAChB,IAAI3E,EAAS4E,OACjBC,UAAUF,EAAEG,QACZC,QAAQlC,EAAS8B,EAAEnB,SAAS,GAAGO,aAC/BiB,YAAY,SACZC,MAAMjE,IAGXd,OAAOgF,iBAAiB,UAAWP,IACf,MAAdA,EAAEQ,SACJ/C,QAAQC,IAAI,YAAYrB,EAAIoE,YAAYC,UAAUC,KAAK,kBAAkBtE,EAAIuE,qBAAqBvE,EAAIwE,qCC1G9GxB,OAAAyB,eAAAC,EAAA,aAAA,CAAAC,OAAA,IACAC,EAAAF,QAAAtC,QAAA","file":"app","sourcesContent":["import './style.scss'\nimport 'mapbox-gl/dist/mapbox-gl.css'\nimport homesLink from './oslo-akershus.csv'\nimport { interpolateInferno as colorScheme } from 'd3-scale-chromatic'\nimport * as d3 from 'd3'\nimport * as mapboxgl from 'mapbox-gl'\nimport * as turf from '@turf/turf'\n\n// This is just here to allow something similar to hmr to work in fuse-box v4\nif (window.loaded) {\n    window.location.reload()\n} else {\n  window.loaded = true\n\n  const scenario = [\n    { key: 'price_per_m2', domain: [15_000, 150_000], scale: 'scaleLog' },\n    { key: 'priceyness', domain: [-1, 1], scale: 'scaleLinear' }\n  ][0]\n\n\n  const colorScale = (str: string) => {\n    const scale = d3[scenario.scale]().domain(scenario.domain).range([0, 1])\n    return colorScheme(scale(Number(str)))\n  }\n\n  const heightScale = (str: string) => {\n    const scale = d3[scenario.scale]().domain(scenario.domain).range([500,2500])\n    return scale(Number(str))\n  }\n\n  const map = new mapboxgl.Map({\n    container: 'map',\n    center: [10.778400724999756, 59.89863797743362],\n    zoom: 10.710328524804181,\n    pitch: 42,\n    style: {\n      version: 8,\n      sources: {\n        'basemap': {\n          type: 'raster',\n          tiles: ['a', 'b', 'c']\n            .map(x => `http://${x}.basemaps.cartocdn.com/dark_all/{z}/{x}/{y}@2x.png`)\n        },\n      },\n      layers: [{\n        id: 'basemap',\n        type: 'raster',\n        source: 'basemap',\n        minzoom: 0,\n        maxzoom: 22\n      }]\n    }\n  })\n  map.addControl(new mapboxgl.NavigationControl())\n\n  console.log(heightScale('15000'))\n\n  const numberformat = Intl.NumberFormat('no-NB', { maximumSignificantDigits: 2 })\n  const asPrice = (str: string) => numberformat.format(Number(str)) + ' kr'\n  const asM2 = (str: string) => numberformat.format(Number(str)) + ' m²'\n  const homeHTML = home => `<h2>${home['Boligtype']} ${asM2(home.area)} (${asPrice(home.price)})</h2><p>(Per m²: ${asPrice(home.price_per_m2)})</p><a href=\"${home.url}\">${home.url}</a>`\n\n  d3.csv(homesLink).then(data => {\n    const geojson = {\n      type: 'FeatureCollection',\n      features: data\n        //.filter(d => d['Boligtype'] === 'Leilighet')\n        .map(d => turf.circle([\n          Number(d.lng), \n          Number(d.lat),\n        ], 100, { units: 'meters', steps: 16, properties: {\n          height: heightScale(d[scenario.key]),\n          color: colorScale(d[scenario.key]),\n          ...d\n        } }))\n    } as any\n\n    console.log(geojson.features[0].properties)\n\n    map.on('load', () => {\n      map.addLayer({\n        type: 'fill-extrusion',\n        id: 'homes',\n        source: {\n          type: 'geojson',\n          data: geojson\n        },\n        paint: {\n          'fill-extrusion-color': ['get', 'color'],\n          'fill-extrusion-base': 0,\n          'fill-extrusion-height': ['get', 'height'],\n          'fill-extrusion-opacity': 0.7\n        }\n      })\n    })\n\n    map.on('click', 'homes', e => {\n      return new mapboxgl.Popup()\n        .setLngLat(e.lngLat)\n        .setHTML(homeHTML(e.features[0].properties))\n        .setMaxWidth('400px')\n        .addTo(map)\n    })\n\n    window.addEventListener('keydown', e => {\n      if (e.keyCode === 188) {\n        console.log(`center: [${map.getCenter().toArray().join(', ')}], pitch: ${map.getPitch()}, zoom: ${map.getZoom()}`)\n      }\n    })\n  })\n\n/*\n  const map = L.map('map', {\n    center: [59.9, 10.75],\n    zoom: 11,\n    layers: [\n      L.tileLayer('http://{s}.basemaps.cartocdn.com/dark_all/{z}/{x}/{y}{r}.png')\n    ]\n  })\n  \n  console.log(homesLink)\n  \n  const numberformat = Intl.NumberFormat('no-NB', { maximumSignificantDigits: 2 })\n  const asPrice = (str: string) => numberformat.format(Number(str)) + ' kr'\n  const asM2 = (str: string) => numberformat.format(Number(str)) + ' m²'\n  \n  d3.csv(homesLink).then(data => {\n    const scale = d3.scaleLog()\n      .domain([15_000,150_000])\n      .range([0, 1])\n\n    const noOffices = (x: any) => x['Boligtype'] !== 'Kontor'\n  \n    data\n      .filter(noOffices)\n      .forEach(home => {\n        const lat = Number(home.lat)\n        const lng = Number(home.lng)\n        const priceyness = Number(home.price_per_m2)\n        \n        const x = scale(priceyness)\n        L.circle([lat, lng], { color: colorScheme(x), radius: 50 })\n          .addTo(map)\n          .bindPopup(`<h2>${home['Boligtype']} ${asM2(home.area)} (${asPrice(home.price)})</h2><p>(Per m²: ${asPrice(home.price_per_m2)})</p><a href=\"${home.url}\">${home.url}</a>`)\n      })\n  })*/\n}\n\n",null]}